//! Commands for the person domain

use crate::value_objects::*;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// Commands that can be sent to a Person aggregate
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum PersonCommand {
    /// Register a new person in the system
    RegisterPerson {
        /// Person's unique ID (generated by caller)
        person_id: Uuid,
        /// Identity information
        identity: IdentityComponent,
        /// Optional contact information
        contact: Option<ContactComponent>,
    },

    /// Change person's contact information
    ChangeContact {
        /// Person's ID
        person_id: Uuid,
        /// New contact information
        contact: ContactComponent,
    },

    /// Add employment information
    AddEmployment {
        /// Person's ID
        person_id: Uuid,
        /// Employment details
        employment: EmploymentComponent,
    },

    /// Change employment status
    ChangeEmploymentStatus {
        /// Person's ID
        person_id: Uuid,
        /// Organization ID
        organization_id: Uuid,
        /// New status
        status: String,
        /// End date if terminated
        end_date: Option<chrono::NaiveDate>,
    },

    /// Add position information
    AddPosition {
        /// Person's ID
        person_id: Uuid,
        /// Position details
        position: PositionComponent,
    },

    /// Change skills
    ChangeSkills {
        /// Person's ID
        person_id: Uuid,
        /// Skills information
        skills: SkillsComponent,
    },

    /// Grant access
    GrantAccess {
        /// Person's ID
        person_id: Uuid,
        /// Access details
        access: AccessComponent,
    },

    /// Add external identifier
    AddExternalIdentifier {
        /// Person's ID
        person_id: Uuid,
        /// System name
        system: String,
        /// Identifier value
        identifier: String,
    },

    /// Update name information
    UpdateName {
        /// Person's ID
        person_id: Uuid,
        /// New name component
        name: NameComponent,
    },

    /// Add alternative names
    AddAlternativeNames {
        /// Person's ID
        person_id: Uuid,
        /// Alternative names
        alternative_names: AlternativeNamesComponent,
    },

    /// Update physical attributes
    UpdatePhysicalAttributes {
        /// Person's ID
        person_id: Uuid,
        /// Physical attributes
        attributes: PhysicalAttributesComponent,
    },

    /// Add distinguishing marks
    AddDistinguishingMarks {
        /// Person's ID
        person_id: Uuid,
        /// Distinguishing marks
        marks: DistinguishingMarksComponent,
    },

    /// Update medical identity information
    UpdateMedicalIdentity {
        /// Person's ID
        person_id: Uuid,
        /// Medical identity
        medical: MedicalIdentityComponent,
    },

    /// Update relationships
    UpdateRelationships {
        /// Person's ID
        person_id: Uuid,
        /// Relationships
        relationships: RelationshipComponent,
    },

    /// Update social media presence
    UpdateSocialMedia {
        /// Person's ID
        person_id: Uuid,
        /// Social media profiles
        social_media: SocialMediaComponent,
    },

    /// Update interests
    UpdateInterests {
        /// Person's ID
        person_id: Uuid,
        /// Interests
        interests: InterestsComponent,
    },

    /// Update preferences
    UpdatePreferences {
        /// Person's ID
        person_id: Uuid,
        /// Preferences
        preferences: PreferencesComponent,
    },

    /// Update behavioral data
    UpdateBehavioralData {
        /// Person's ID
        person_id: Uuid,
        /// Behavioral data
        behavioral: BehavioralComponent,
    },

    /// Update segmentation
    UpdateSegmentation {
        /// Person's ID
        person_id: Uuid,
        /// Segmentation
        segmentation: SegmentationComponent,
    },

    /// Add biometric data
    AddBiometricData {
        /// Person's ID
        person_id: Uuid,
        /// Biometric component
        biometric: BiometricComponent,
    },

    /// Add a generic component
    AddComponent {
        /// Person's ID
        person_id: Uuid,
        /// Component type name
        component_type: String,
        /// Component data as JSON
        component_data: serde_json::Value,
        /// Who is adding this
        added_by: String,
        /// Reason for adding
        reason: Option<String>,
    },

    /// Remove a component by type
    RemoveComponent {
        /// Person's ID
        person_id: Uuid,
        /// Component type to remove
        component_type: String,
        /// Who is removing this
        removed_by: String,
        /// Reason for removal
        reason: Option<String>,
    },
}


